def swapkthnode(head,num,k):

	prev_x = None
	prev_y = head

	# find k'th node from the beginning and store it in x
	# also calculate previous node of x and store it in prev_x
	curr = head
	i = 1
	while i < k and curr:
		prev_x = curr
		curr = curr.next
		i = i + 1

	x = curr

	# k is more than number of nodes, X and Y donâ€™t exist
	if curr is None:
		return None

	# find k'th node from the end and store it in y
	# also calculate previous node of y and store it in prev_y
	ptr = head
	while curr.next:
		prev_y = ptr
		ptr = ptr.next
		curr = curr.next

	y = ptr

	# Y is next to X (X . Y)
	if x.next == y:

		x.next = y.next
		y.next = x
		prev_x.next = y

	# X is next to Y (Y . X)
	elif y.next == x:

		y.next = x.next
		x.next = y
		prev_y.next = x

	# X is head node
	elif x == head:

		head = y
		y.next = x.next
		prev_y.next = x
		x.next = None

	# Y is head node
	elif y == head:

		head = x
		x.next = y.next
		prev_x.next = y
		y.next = None

	# otherwise
	else:
		ptr = y.next
		y.next = x.next
		x.next = ptr

		prev_x.next = y
		prev_y.next = x

	return head
